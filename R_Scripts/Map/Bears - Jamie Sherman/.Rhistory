utils:::menuInstallPkgs()
library(RMark)
library(pegas)
install.packages('pegas')
install.packages(c('pegas','dplyr'))
library(pegas)
setwd("V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman")
library(leaflet)
library(rgdal)
library(fifer)
library(maps)
library(maptools)
library(ggplot2)
library(rgeos)
library(raster)
library(spatstat)
library(rgdal)
library(ggmap)
#Credit here: http://editerna.free.fr/wp/?p=76
library(maps)
library(maptools)
library(ggplot2)
library(grid)
#Then, we need a function to get the scale bar coordinates:
#
# Result #
#--------#
# Return a list whose elements are :
#   - rectangle : a data.frame containing the coordinates to draw the first rectangle ;
#   - rectangle2 : a data.frame containing the coordinates to draw the second rectangle ;
#   - legend : a data.frame containing the coordinates of the legend texts, and the texts as well.
#
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distanceLon : length of each rectangle ;
# distanceLat : width of each rectangle ;
# distanceLegend : distance between rectangles and legend texts ;
# dist.units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles).
createScaleBar <- function(lon,lat,distanceLon,distanceLat,distanceLegend, dist.units = "km"){
# First rectangle
bottomRight <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distanceLon, dist.units = dist.units, model = "WGS84")
topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distanceLat, dist.units = dist.units, model = "WGS84")
rectangle <- cbind(lon=c(lon, lon, bottomRight[1,"long"], bottomRight[1,"long"], lon),
lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],lat, lat))
rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
# Second rectangle t right of the first rectangle
bottomRight2 <- gcDestination(lon = lon, lat = lat, bearing = 90, dist = distanceLon*2, dist.units = dist.units, model = "WGS84")
rectangle2 <- cbind(lon = c(bottomRight[1,"long"], bottomRight[1,"long"], bottomRight2[1,"long"], bottomRight2[1,"long"],
bottomRight[1,"long"]),
lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], lat, lat))
rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
# Now let's deal with the text
onTop <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distanceLegend, dist.units = dist.units, model = "WGS84")
onTop2 <- onTop3 <- onTop
onTop2[1,"long"] <- bottomRight[1,"long"]
onTop3[1,"long"] <- bottomRight2[1,"long"]
legend <- rbind(onTop, onTop2, onTop3)
legend <- data.frame(cbind(legend, text = c(0, distanceLon, distanceLon*2)), stringsAsFactors = FALSE, row.names = NULL)
return(list(rectangle = rectangle, rectangle2 = rectangle2, legend = legend)) }
#We also need a function to obtain the coordinates of the North arrow:
#
# Result #
#--------#
# Returns a list containing :
#   - res : coordinates to draw an arrow ;
#   - coordinates of the middle of the arrow (where the "N" will be plotted).
#
# Arguments : #
#-------------#
# scaleBar : result of createScaleBar() ;
# length : desired length of the arrow ;
# distance : distance between legend rectangles and the bottom of the arrow ;
# dist.units : units of distance "km" (kilometers) (default), "nm" (nautical miles), "mi" (statute miles). createOrientationArrow <-
function(scaleBar, length, distance = 1, dist.units = "km"){
lon <- scaleBar$rectangle2[1,1]
lat <- scaleBar$rectangle2[1,2]
# Bottom point of the arrow
begPoint <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = distance, dist.units = dist.units, model = "WGS84")
lon <- begPoint[1,"long"]
lat <- begPoint[1,"lat"]
# Let us create the endpoint
onTop <- gcDestination(lon = lon, lat = lat, bearing = 0, dist = length, dist.units = dist.units, model = "WGS84")
leftArrow <- gcDestination(lon = onTop[1,"long"], lat = onTop[1,"lat"], bearing = 225, dist = length/5, dist.units =
dist.units, model = "WGS84")
rightArrow <- gcDestination(lon = onTop[1,"long"], lat = onTop[1,"lat"], bearing = 135, dist = length/5, dist.units =
dist.units, model = "WGS84")
res <- rbind(
cbind(x = lon, y = lat, xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = leftArrow[1,"long"], y = leftArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]),
cbind(x = rightArrow[1,"long"], y = rightArrow[1,"lat"], xend = onTop[1,"long"], yend = onTop[1,"lat"]))
res <- as.data.frame(res, stringsAsFactors = FALSE)
# Coordinates from which "N" will be plotted
coordsN <- cbind(x = lon, y = (lat + onTop[1,"lat"])/2)
return(list(res = res, coordsN = coordsN)) }
#The last function enables the user to draw the elements:
#
# Result #
#--------#
# This function enables to draw a scale bar on a ggplot object, and optionally an orientation arrow #
# Arguments : #
#-------------#
# lon, lat : longitude and latitude of the bottom left point of the first rectangle to draw ;
# distanceLon : length of each rectangle ;
# distanceLat : width of each rectangle ;
# distanceLegend : distance between rectangles and legend texts ;
# dist.units : units of distance "km" (kilometers) (by default), "nm" (nautical miles), "mi" (statute miles) ;
# rec.fill, rec2.fill : filling colour of the rectangles (default to white, and black, resp.);
# rec.colour, rec2.colour : colour of the rectangles (default to black for both);
# legend.colour : legend colour (default to black);
# legend.size : legend size (default to 3);
# orientation : (boolean) if TRUE (default), adds an orientation arrow to the plot ;
# arrow.length : length of the arrow (default to 500 km) ;
# arrow.distance : distance between the scale bar and the bottom of the arrow (default to 300 km) ;
# arrow.North.size : size of the "N" letter (default to 6).
scaleBar <- function(lon, lat, distanceLon, distanceLat, distanceLegend,
dist.unit = "km", rec.fill = "white", rec.colour = "black", rec2.fill = "black", rec2.colour = "black", legend.colour = "black", legend.size = 3, orientation = TRUE, arrow.length = 500, arrow.distance = 300, arrow.North.size = 6){
laScaleBar <- createScaleBar(lon = lon, lat = lat, distanceLon = distanceLon, distanceLat = distanceLat, distanceLegend = distanceLegend, dist.unit = dist.unit)
# First rectangle
rectangle1 <- geom_polygon(data = laScaleBar$rectangle, aes(x = lon, y = lat), fill = rec.fill, colour = rec.colour)
# Second rectangle
rectangle2 <- geom_polygon(data = laScaleBar$rectangle2, aes(x = lon, y = lat), fill = rec2.fill, colour = rec2.colour)
# Legend
scaleBarLegend <- annotate("text", label = paste(laScaleBar$legend[,"text"], dist.unit, sep=""), x =
laScaleBar$legend[,"long"], y = laScaleBar$legend[,"lat"], size =
legend.size, colour = legend.colour)
res <- list(rectangle1, rectangle2, scaleBarLegend)
if(orientation){# Add an arrow pointing North
coordsArrow <- createOrientationArrow(scaleBar = laScaleBar, length = arrow.length, distance = arrow.distance, dist.unit =
dist.unit)
arrow <- list(geom_segment(data = coordsArrow$res, aes(x = x, y = y, xend = xend, yend = yend)), annotate("text", label = "N", x =
coordsArrow$coordsN[1,"x"], y = coordsArrow$coordsN[1,"y"], size =
arrow.North.size, colour = "black"))
res <- c(res, arrow)
}
return(res) }
#Read in the sampling points
Cpoints = read.table("SLOandMonteryBearSamplingLocations.txt", row.names="Cell", header = T) #
NewPoints=SpatialPoints(Cpoints)
NewPoints=SpatialPointsDataFrame(NewPoints,Cpoints)
crs(NewPoints) = sp::CRS("+proj=longlat +datum=WGS84 +no_defs")
#Read in the shapefiles and fix them up for ggplot2()
HexesMo=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\hexagon.kml", layer="HexMonterey")
HexesMo=spTransform(HexesMo, CRS(proj4string(NewPoints)))
HexesMo=HexesMo[NewPoints, ]
#HexesMo_df=fortify(HexesMo)
Hexes=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\Shape files 5-6-13\\Hex.shp", layer="Hex")
Hexes=spTransform(Hexes, CRS(proj4string(NewPoints)))
Hexes=Hexes[NewPoints, ]
#Hexes_df=fortify(Hexes)
#Using state_basic from https://www.arcgis.com/home/item.html?id=f7f805eb65eb4ab787a0a3e1116ca7e5
US=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\CAShapefiles\\states.shp", layer="states")
CAoutline=subset(US, STATE_NAME=="California")
CAoutline=spTransform(CAoutline, CRS(proj4string(NewPoints)))
#Using Jamie's StateCA file, I need to figure out where it's from
California=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\CAShapefiles\\State_With_County_Boundaries.shp", layer="State_With_County_Boundaries")
CAcounties=subset(California, COUNTY_COD=="27" | COUNTY_COD=="40") #27=Montery, 40=SLO
California=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\CAShapefiles\\State_With_County_Boundaries.shp", layer="State_With_County_Boundaries")
California=spTransform(California, CRS(proj4string(NewPoints)))
#CAcounties_df=fortify(CAcounties)
Box=data.frame(lon=c(-121.9812,-121.9812,-119.4726,-119.4726),lat=c(36.91976,34.89752,34.89752,36.91976))
leaflet(CAoutline) %>%
setView(-118.5, 38, 5) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community') %>%
addPolygons(color="gray50", opacity=1, weight=5) %>%
addPolygons(data=CAcounties, group=NULL, color="black", opacity=1, fill=T, fillColor="white", fillOpacity=0.3, weight=3)  %>%
addPolygons(data=California, color="black", opacity=1, weight=3)
leaflet(CAoutline) %>%
setView(-118.5, 38, 5) %>%
addTiles('http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community') %>%
addPolygons(color="gray50", opacity=1, weight=5) %>%
addPolygons(data=California, color="black", opacity=1, weight=3)   %>%
addPolygons(data=CAcounties, group=NULL, color="black", opacity=1, fill=T, fillColor="white", fillOpacity=0.3, weight=3)
CAcounties
#and the inset
CAcounties_df=fortify(CAcounties)
Hexes_df=fortify(Hexes)
HexesMo_df=fortify(HexesMo)
mapdata=data.frame(NewPoints)
NewPoints_df=fortify(mapdata)
theme_opts <- list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill="white"),
panel.border = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=42)))
#and the inset
#Run ggmap_AddScalebar.R before executing this bit (it's in the R > Maps directory)
Box=data.frame(lon=c(-121.9812,-121.9812,-119.4726,-119.4726),lat=c(36.91976,34.89752,34.89752,36.91976))
p = ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
ggsave("Inset_Final.png",p,width=400,height=350, units="mm", dpi=200)
ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
NewPoints_df
#Read in the sampling points
Cpoints = read.table("SLOandMonteryBearSamplingLocations.txt", row.names="Cell", header = T) #
NewPoints=SpatialPoints(Cpoints)
NewPoints=SpatialPointsDataFrame(NewPoints,Cpoints)
crs(NewPoints) = sp::CRS("+proj=longlat +datum=WGS84 +no_defs")
#Read in the shapefiles and fix them up for ggplot2()
HexesMo=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\hexagon.kml", layer="HexMonterey")
HexesMo=spTransform(HexesMo, CRS(proj4string(NewPoints)))
HexesMo=HexesMo[NewPoints, ]
#HexesMo_df=fortify(HexesMo)
Hexes=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\Shape files 5-6-13\\Hex.shp", layer="Hex")
Hexes=spTransform(Hexes, CRS(proj4string(NewPoints)))
Hexes=Hexes[NewPoints, ]
#Hexes_df=fortify(Hexes)
#Using state_basic from https://www.arcgis.com/home/item.html?id=f7f805eb65eb4ab787a0a3e1116ca7e5
US=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\CAShapefiles\\states.shp", layer="states")
CAoutline=subset(US, STATE_NAME=="California")
CAoutline=spTransform(CAoutline, CRS(proj4string(NewPoints)))
Box=data.frame(lon=c(-121.9812,-121.9812,-119.4726,-119.4726),lat=c(36.91976,34.89752,34.89752,36.91976))
p = ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
p
HexesMo_df
Hexes_df
CAcounties_df
CAcounties
California=readOGR(dsn="V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Map\\Bears - Jamie Sherman\\CAShapefiles\\State_With_County_Boundaries.shp", layer="State_With_County_Boundaries")
CAcounties=subset(California, COUNTY_COD=="27" | COUNTY_COD=="40") #27=Montery, 40=SLO
CAcounties=spTransform(CAcounties, CRS(proj4string(NewPoints)))
ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
HexesMo_df
Hexes_df
CAcounties_df
NewPoints_df
Box
CAcounties
CAcounties_df=fortify(CAcounties)
Hexes_df=fortify(Hexes)
HexesMo_df=fortify(HexesMo)
mapdata=data.frame(NewPoints)
NewPoints_df=fortify(mapdata)
ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
p = ggplot(Box, aes(lon,lat, group=NULL)) +
theme_opts + #Apply our themes from above
geom_path(data=HexesMo_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=Hexes_df, aes(long,lat,group=group, fill=F)) +
geom_path(data=CAcounties_df, aes(long,lat,group=group, fill=F)) +
geom_point(data=NewPoints_df, aes(Long, Lat, group=NULL),size=4, alpha = .8, colour="gray25") +
theme(legend.position="none") +
scaleBar(lon = -122.2, lat = 35, distanceLon = 40, distanceLat = 6, distanceLegend = 11, dist.unit = "km", orientation = FALSE, legend.size = 12)
ggsave("Inset_Final.png",p,width=400,height=350, units="mm", dpi=200)
