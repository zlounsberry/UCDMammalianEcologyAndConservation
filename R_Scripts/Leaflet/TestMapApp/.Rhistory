colors[HaplotypeColumn]
})
output$mymap <- renderLeaflet({
leaflet() %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(data=points(), weight = 6, radius=40, color=col1(), stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(Raster(), colors = col(), project=F)
})
})
colnames(FakeCluster[4:8]
)
shinyApp(
ui = fluidPage(titlePanel("Mysterious Dots and Surfaces?"), leafletOutput("mymap"),
sidebarLayout(sidebarPanel(helpText("What species?")),
selectInput("var",label = "Choose a species",
choices = colnames(FakeCluster[4:8]), selected = colnames(FakeCluster[,4])))),
server = function(input, output) {
points = eventReactive(input$var, {
FakeCluster=read.csv("fakedata.csv", header=T)
Species=input$var
Speciescolumn=which(colnames(FakeCluster)==Haplotype)
toVary=FakeCluster[,Speciescolumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
cbind(Dens$longRange,Dens$latRange)
})
Raster = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Haplotype=input$var
HaplotypeColumn=which(colnames(FakeCluster)==Haplotype)
toVary=FakeCluster[,HaplotypeColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
surface
})
col = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Haplotype=input$var
HaplotypeColumn=which(colnames(FakeCluster)==Haplotype)
colors=string.to.color(colnames(FakeCluster[1:10]))
col1 = colors[HaplotypeColumn]
colorRampPalette(c("transparent", col1), alpha=T)( 100 )
})
col1 = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Haplotype=input$var
HaplotypeColumn=which(colnames(FakeCluster)==Haplotype)
colors=string.to.color(colnames(FakeCluster[1:10]))
colors[HaplotypeColumn]
})
output$mymap <- renderLeaflet({
leaflet() %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(data=points(), weight = 6, radius=40, color=col1(), stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(Raster(), colors = col(), project=F)
})
})
FakeCluster=read.csv("fakedata.csv", header=T)
Speciescolumn=which(colnames(FakeCluster)==Haplotype)
Speciescolumn=which(colnames(FakeCluster)==Species)
FakeCluster=read.csv("fakedata.csv", header=T)
shinyApp(
ui = fluidPage(titlePanel("Mysterious Dots and Surfaces?"), leafletOutput("mymap"),
sidebarLayout(sidebarPanel(helpText("What species?")),
selectInput("var",label = "Choose a species",
choices = colnames(FakeCluster[4:8]), selected = colnames(FakeCluster[,4])))),
server = function(input, output) {
points = eventReactive(input$var, {
FakeCluster=read.csv("fakedata.csv", header=T)
Species=input$var
Speciescolumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,Speciescolumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
cbind(Dens$longRange,Dens$latRange)
})
Raster = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Species=input$var
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
surface
})
col = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Species=input$var
SpeciesColumn=which(colnames(FakeCluster)==Species)
colors=string.to.color(colnames(FakeCluster[1:10]))
col1 = colors[SpeciesColumn]
colorRampPalette(c("transparent", col1), alpha=T)( 100 )
})
col1 = eventReactive(input$var, {
FakeCluster=read.csv("FakeData.csv", header=T)
Species=input$var
SpeciesColumn=which(colnames(FakeCluster)==Species)
colors=string.to.color(colnames(FakeCluster[1:10]))
colors[SpeciesColumn]
})
output$mymap <- renderLeaflet({
leaflet() %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(data=points(), weight = 6, radius=40, color=col1(), stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(Raster(), colors = col(), project=F)
})
})
FakeCluster=read.csv("fakedata.csv", header=T)
colnames(FakeCluster[4:8])
Speciescolumn=which(colnames(FakeCluster)=="Dog")
Speciescolumn
toVary=FakeCluster[,Speciescolumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
cbind(Dens$longRange,Dens$latRange)
FakeCluster=read.csv("FakeData.csv", header=T)
Species=input$var
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
FakeCluster=read.csv("FakeData.csv", header=T)
Species="dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
Species="dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
SpeciesColumn
FakeCluster=read.csv("FakeData.csv", header=T)
Species="dogs"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
colnames(FakeCluster)=
colnames(FakeCluster)
FakeCluster=read.csv("FakeData.csv", header=T)
Species="Dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-110),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
Dens
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1(), stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col(), project=F)
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
surface=projectRasterForLeaflet(surface)
colors=string.to.color(colnames(FakeCluster[1:10]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
colors=string.to.color(colnames(FakeCluster[1:10]))
colors=string.to.color(colnames(FakeCluster[1:8]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
Dens
pt.dens
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png', {
attribution: '&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
?"owin"
setwd("C:\\Users\\Zach\\Documents\\EMBARK\\MapTestApp")
setwd("C:\\Users\\Zach\\Documents\\EMBARK\\TestMapApp")
FakeCluster=read.csv("FakeData.csv", header=T)
Species="Dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-112),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=10, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
colors=string.to.color(colnames(FakeCluster[1:8]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
leaflet(Dens) %>%
setView(38,-121,5) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(38,-121.5) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(38,-121.5, 2) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
FakeCluster
leaflet(Dens) %>%
setView(38,-118.5, 2) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(-118.5, 38, 2) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(-118.5, 38, 8) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
leaflet(Dens) %>%
setView(-118.5, 38, 6) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
FakeCluster=read.csv("FakeData.csv", header=T)
Species="Dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-112),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=4, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
colors=string.to.color(colnames(FakeCluster[1:8]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
leaflet(Dens) %>%
setView(-118.5, 38, 6) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
FakeCluster=read.csv("FakeData.csv", header=T)
Species="Dog"
SpeciesColumn=which(colnames(FakeCluster)==Species)
toVary=FakeCluster[,SpeciesColumn]
longRange = FakeCluster$Long
latRange = FakeCluster$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=FakeCluster[,1])
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
xWin=owin(c(-125,-112),c(30,43))
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=2, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
colors=string.to.color(colnames(FakeCluster[1:8]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
leaflet(Dens) %>%
setView(-118.5, 38, 6) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
?"owin"
CA = readShapeLines("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
??readShapeLines
library(maptools) #for the CA boundary
install.packages('maptools')
library(maptools) #for the CA boundary
CA = readShapeLines("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
?as.ppp
pts <- as.ppp(Dens,W=CA)
?as.owin
map
map()
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_0_countries.zip'),
f <- tempfile())
unzip(f, exdir=tempdir())
world <- readOGR(tempdir(), 'ne_50m_admin_0_countries', encoding='UTF-8')
world
world$CA
CA
pts <- as.ppp(Dens,W=CA)
xWIN = owin(CA)
CA
CA = readShapeSpatial("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
xWIN = owin(CA)
CAtest=as.psp(CA)
CA
CA$x
CA$variables
CA
CA@data
plot(CA)
CA@polygons
xWin=owin(CA@polygons)
head(CA@polygons)
ok=as.SpatialPolygons.owin(CA)
library(maptools) #for the CA boundary
maptools::as.owin.SpatialPolygons(CA)
test = maptools::as.owin.SpatialPolygons(CA)
class(test)
pts <- as.ppp(Dens,W=test)
pts <- as.ppp(Dens,W=test)
pt.dens = density(pts,weights=pts$marks, sigma=2, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface=projectRasterForLeaflet(surface)
colors=string.to.color(colnames(FakeCluster[1:8]))
col1 = colors[SpeciesColumn]
col1 = colorRampPalette(c("transparent", col1), alpha=T)( 100 )
leaflet(Dens) %>%
setView(-118.5, 38, 6) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40, color=col1, stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface, colors = col1, project=F)
xWin = maptools::as.owin.SpatialPolygons(CA)
CA = readShapeSpatial("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
xWin = maptools::as.owin.SpatialPolygons(CA)
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=2, eps=1)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
install.packages("maps")
library(maps)
?world
map('world')
map('world',regions="California")
map('world',regions="california")
map('world',regions="USA:california")
map('world')
map('world',regions="USA:california", ADD=T)
map('world')
map('world',regions="USA:california", add=T, col=red)
map('world')
map('world',regions="USA:california", add=T, col="red")
map('world',regions="USA:California", add=T, col="red")
US = readShapeSpatial("cb_2014_us_state_500k.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
US = readShapeSpatial("cb_2014_us_state_500k.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
map('state', regions="California")
CA = map('state', regions="California")
CA = map('state', regions="California". projection = "+proj=longlat")
CA = map('state', regions="California". projection = "longlat")
CA = map('state', regions="California", projection = "+proj=longlat")
CA = map('state', regions="California", projection = "longlat")
?mapproject
CA = map('state', regions="California", projection = "mercator")
CA = map('state', regions="California", projection = "mercator")
CA = map('state', regions="California", projection = "mercator")
CA
xWin = owin(CA$x, CA$y)
?"owin"
xWin = owin(poly=c(CA$x, CA$y)
)
CA$x
xWin = owin(poly=c(CA$x, CA$y))
xWin = owin(poly=CA$x,CA$y)
c(CA$x,CA$y)
cbind(CA$x,CA$y)
xWin = owin(poly=cbind(CA$x,CA$y))
cbind(CA$x,CA$y)
class(cbind(CA$x,CA$y))
xWin = owin(poly=cbind(CA$x,CA$y))
as.list(cbind(CA$x,CA$y))
as.list(c(CA$x,CA$y))
xWin = owin(poly=cbind(CA$x,CA$y))
xWin = owin(poly=CA)
class(CA)
class(CA$x)
as.list(CA$x)
CA = readShapeSpatial("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
CA
CA@plotOrder
CA
projectRasterForLeaflet(CA)
US = readShapeSpatial("tl_2013_us_state.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
US = readShapeSpatial("CaliMap/tl_2013_us_state.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
US
US@polygons
head(US@polygons)
US
US@names
US$names
US
str(US)
str(US)
US = readShapeSpatial("CaliMap/tl_2013_us_state.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
CA = readShapeSpatial("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
CA = readShapeSpatial("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
str(CA)
plot(CA)
CA = readShapeLines("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
str(CA)
plot(CA)
class(CA)
head(CA)
CA = readShapeLines("CaliMap/tl_2013_06_place.shp", proj4string=CRS("+proj=longlat"), verbose=TRUE, repair=FALSE, delete_null_obj=FALSE)
head(CA)
