demo()
read.cvs()
Read.cvs()
read.csv()
read.csv(Zinc)
install.packages('Zinc')
read.csv("Zinc")
read.csv("Zinc.csv")
help(read)
help(Read)
help(csv)
help("read")
testplot <- c(2, 3, 4)
barplot(testplot)
readcsv()
read.csv()
read.csv("Zinc")
read.csv("Zinc")
read.csv("Zinc.csv")
read.csv("Zinc.csv*")
lm(Zinc.csv)
lm(zinc.csv)
lm(Concentration~Peak-area)
read.csv("Zinc.csv")
list.files()
Zinc <- read.csv("V:/3730Data/377STRs/Wildlife/Jennifer  Brazeal/R files/Zinc.csv")
View(Zinc)
lmobj<-lm(Concentration`Peak.Area)
Summary(lmobj)
View(Zinc)
mean(Concentration)
plot(lmobk)
read.csv("Zinc.csv")
Zinc<-read.csv("Zinc.csv")
lm(Concentration ~ Peak.Area)
lm(Concentration~Peak.Area)
lm(Peak.Area~Concentration)
lm(Zinc)
plot(Concentration,Peak.Area)
data.frame(Zinc)
plot(Zinc)
title("Concentration vs. Peak.Area")
Plot(Zinc)
Zinc.lm<-lm(Zinc)
summary(Zinc.lm)
sd(Zinc)
abline(coef(Zinc.lm), lwd=2, col="red"")
abline(coef(Zinc.lm))
read.csv("Zinc.csv")
Zinc.lm<-lm(Peak.Area~Concentration)
lm(Zinc)
Zinc.lm <- lm("Zinc.csv"")
read.csv("Zinc.csv")
lm("Zinc.csv")
Zinc.lm<-lm(read.csv("Zinc.csv"))
Summary(Zinc.lm)
summary(Zinc.lm)
plot(Zinc.lm)
Zinc<-read.csv("Zinc.csv")
plot(Zinc)
title<-(Concentration vs. PeakArea)
title("Concentration vs. Peak Area")
abline(coef(Zinc.lm))
abline(coef(Zinc.lm),lwd=2,col="blue")
abline(coef(.13851))
plot(fitted(Zinc.lm),resid(Zinc.lm))
abline(h=0)
coef(Zinc.lm)
deviation<-(52)
read.csv("Zinc.csv")
Zinc.lm<-lm(read.csv("Zinc.csv"))
plot(read.csv("Zinc.csv"))
abline(Zinc.lm)
abline(col=red)
abline(Zinc,lm, col=red)
abline(Zinc.lm, col=red)
summary(Zinc.lm)
install.packages("Arlequin")
alt<-raster(filename)
ext <- extent(-125,-118,33,40)
alt1<-crop(alt, ext)
altdf<-as.data.frame(alt1, xy=TRUE)
altdf$cost1<- altdf$USA1_msk_alt
altdf$cost1[altdf$cost1<=80] <- 100000
altdf$cost1[altdf$cost1>80 & altdf$cost1<=300] <- 50000
altdf$cost1[altdf$cost1>300 & altdf$cost1<5000] <- 10000
altdf$cost1[altdf$cost1==100000] <- 100
altdf$cost1[altdf$cost1==50000] <- 20
altdf$cost1[altdf$cost1==10000] <- 1
cost1<- altdf[,c(1:2, 4)]
coordinates(cost1) <- ~ x + y
projection(cost1)<-"+proj=longlat +ellps=WGS84  "
gridded(cost1) <- TRUE
costr1 <- raster(cost1)
costr1
tr1 <- transition(costr1, transitionFunction = mean, directions = 8)
library(gdistance)
library(raster)
filename<-"V:/3730Data/377STRs/Wildlife/GIS data/NN Red Fox/USA1_msk_alt.grd"
alt<-raster(filename)
ext <- extent(-125,-118,33,40)
alt1<-crop(alt, ext)
altdf<-as.data.frame(alt1, xy=TRUE)
slopedf<-as.data.frame(slope, xy=TRUE)
altdf$slope<-slopedf$slope
altdf$cost1<- altdf$USA1_msk_alt
altdf$cost1[altdf$cost1<=80] <- 100000
altdf$cost1[altdf$cost1>80 & altdf$cost1<=300] <- 50000
altdf$cost1[altdf$cost1>300 & altdf$cost1<5000] <- 10000
altdf$cost1[altdf$cost1==100000] <- 100
altdf$cost1[altdf$cost1==50000] <- 20
altdf$cost1[altdf$cost1==10000] <- 1
cost1<- altdf[,c(1:2, 4)]
coordinates(cost1) <- ~ x + y
projection(cost1)<-"+proj=longlat +ellps=WGS84  "
gridded(cost1) <- TRUE
costr1 <- raster(cost1)
costr1
tr1 <- transition(costr1, transitionFunction = mean, directions = 8)
tr1CorrC <- geoCorrection(tr1, type = "c", multpl = FALSE)
centroids<-read.csv("centroids2.csv")
coordinates(centroids)<- ~ lon + lat
projection(centroids)<-"+proj=longlat +ellps=WGS84  "geo<-read.csv("GEO R Input.csv")
gen<-read.csv("FST R Input.csv")
library(ade4)
geodist <- as.dist(geo)
gendist <-as.dist(gen)
CD1<-costDistance(tr1CorrC, centroids)
plot(tr1)
plot(raster(tr1CorrC))
q()
q()
library("tcltk", lib.loc="\\\\vgl/lab/Sacks-Users/k9diversity/R/R-3.2.4revised/library")
library("boot", lib.loc="\\\\vgl/lab/Sacks-Users/k9diversity/R/R-3.2.4revised/library")
detach("package:boot", unload=TRUE)
detach("package:tcltk", unload=TRUE)
install.packages("tlocoh", dependencies=T, repos=c("http://R-Forge.R-project.org" , "http://cran.cnr.berkeley.edu"))
setwd("V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Leaflet\\TuleElk")
library(shiny)
library(leaflet)
library(spatstat)
library(raster)
library(rgdal)
library(fifer)
library(maps)
library(maptools)
FakeCluster=read.csv("./ElkTest.csv", header=T)
AgeClass="COW"
AgeClassColumn=which(colnames(FakeCluster)==AgeClass)
toVary=FakeCluster[,AgeClassColumn]
longRange = FakeCluster$X
latRange = FakeCluster$Y
CowDens = data.frame(longRange,latRange,toVary, row.names=NULL)
CowDens = CowDens[complete.cases(CowDens),]
CowDens$toVary=CowDens$toVary - min(CowDens$toVary)
CowDens$toVary=CowDens$toVary/(max(CowDens$toVary))
CowDens$toVary=CowDens$toVary*10
xWin = owin(c(-124.2,-121.3),c(37.9,40.6))
pts <- as.ppp(CowDens,W=xWin)
pt.CowDens = density(pts,weights=pts$marks, sigma=0.1, eps=0.005)
surface = raster(pt.CowDens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface1=projectRasterForLeaflet(surface)
col1=colorRampPalette(c("transparent", "white"), alpha=T)( 30 )
AgeClass="CALF"
AgeClassColumn=which(colnames(FakeCluster)==AgeClass)
toVary=FakeCluster[,AgeClassColumn]
longRange = FakeCluster$X
latRange = FakeCluster$Y
CalfDens = data.frame(longRange,latRange,toVary, row.names=NULL)
CalfDens = CalfDens[complete.cases(CalfDens),]
CalfDens$toVary=CalfDens$toVary - min(CalfDens$toVary)
CalfDens$toVary=CalfDens$toVary/(max(CalfDens$toVary))
CalfDens$toVary=CalfDens$toVary*10
xWin = owin(c(-124.2,-121.3),c(37.9,40.6))
pts <- as.ppp(CalfDens,W=xWin)
pt.CalfDens = density(pts,weights=pts$marks, sigma=0.1, eps=0.005)
surface = raster(pt.CalfDens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface2=projectRasterForLeaflet(surface)
col2=colorRampPalette(c("transparent", "red"), alpha=T)( 30 )
AgeClass="BULL"
AgeClassColumn=which(colnames(FakeCluster)==AgeClass)
toVary=FakeCluster[,AgeClassColumn]
longRange = FakeCluster$X
latRange = FakeCluster$Y
BullDens = data.frame(longRange,latRange,toVary, row.names=NULL)
BullDens = BullDens[complete.cases(BullDens),]
BullDens$toVary=BullDens$toVary - min(BullDens$toVary)
BullDens$toVary=BullDens$toVary/(max(BullDens$toVary))
BullDens$toVary=BullDens$toVary*10
xWin = owin(c(-124.2,-121.3),c(37.9,40.6))
pts <- as.ppp(BullDens,W=xWin)
pt.BullDens = density(pts,weights=pts$marks, sigma=0.1, eps=0.005)
surface = raster(pt.BullDens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface3=projectRasterForLeaflet(surface)
col3=colorRampPalette(c("transparent", "darkgreen"), alpha=T)( 30 )
leaflet() %>%
setView(-118.5, 38, 5) %>%
addTiles('http://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
attribution='Map data: &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>') %>%
addCircles(CowDens$longRange, CowDens$latRange, weight = CowDens$toVary, color="black", stroke = TRUE, fillOpacity = 0.9) %>%
addCircles(BullDens$longRange, BullDens$latRange, weight = BullDens$toVary, color="black", stroke = TRUE, fillOpacity = 0.9) %>%
addCircles(CalfDens$longRange, CalfDens$latRange, weight = CalfDens$toVary, color="black", stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface1, colors = col1, project=F) %>%
addRasterImage(surface2, colors = col2, project=F) %>%
addRasterImage(surface3, colors = col3, project=F)
###########################################################################
#Confining to EMUs - IN PROGRESS, doesn't work yet.
FakeCluster=read.csv("./ElkTest.csv", header=T)
AgeClass="BULL"
AgeClassColumn=which(colnames(FakeCluster)==AgeClass)
toVary=FakeCluster[,AgeClassColumn]
longRange = FakeCluster$X
latRange = FakeCluster$Y
Dens = data.frame(longRange,latRange,toVary, row.names=NULL)
Dens = Dens[complete.cases(Dens),]
Dens$toVary=Dens$toVary - min(Dens$toVary)
Dens$toVary=Dens$toVary/(max(Dens$toVary))
Dens$toVary=Dens$toVary*10
#  Line = readShapeLines("V:/3730Data/377STRs/Wildlife/Lake & Colusa Tule Elk Project/Tule GIS/shapefiles, layers, etc/CDFW Elk Hunt Zones/BearValleyEMU")
Line = readShapePoly("V:/3730Data/377STRs/Wildlife/Lake & Colusa Tule Elk Project/Tule GIS/shapefiles, layers, etc/CDFW Elk Hunt Zones/CacheCreekEMU", proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
#crs(Line) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
Line = projectRasterForLeaflet(Line)
xWin=as.owin.SpatialPolygons(Line)
pts <- as.ppp(Dens,W=xWin)
pt.dens = density(pts,weights=pts$marks, sigma=0.1, eps=0.005)
surface = raster(pt.dens)
crs(surface) = sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
surface1=projectRasterForLeaflet(surface)
col1=colorRampPalette(c("transparent", "yellow"), alpha=T)( 30 )
leaflet(Dens) %>%
setView(-118.5, 38, 5) %>%
addTiles('http://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png',
'&copy; <a href="http://www.opencyclemap.org">OpenCycleMap</a>, &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(Dens$longRange, Dens$latRange, weight = ~toVary, radius=40, color="red", stroke = TRUE, fillOpacity = 0.9) %>%
addRasterImage(surface1, colors = col1, project=F)
##"Cool" you are probably thinking to yourself... "But how do I do this with real data??"
##See: below... sorry, not quite annotated yet...
setwd("V:\\3730Data\\377STRs\\Wildlife\\R Scripts\\R Stuff\\Leaflet")
library(leaflet)
library(shiny)
library(spatstat)
library(raster)
library(rgdal)
library(fifer)
MeanClusterByGeography=read.csv("ElkTest.csv", header=T)
colors=string.to.color(colnames(MeanClusterByGeography[6:8]))
col=colorRampPalette(c("transparent", "black"), alpha=T)( 70 )
toVary=MeanClusterByGeography[,10]
longRange = MeanClusterByGeography$Lon
latRange = MeanClusterByGeography$Lat
Dens = data.frame(longRange,latRange,toVary, row.names=MeanClusterByGeography[,2])
xWin=owin(c(-179,179),c(-89,89))
pts <- as.ppp(Dens,W=xWin)
#tiles: http://leaflet-extras.github.io/leaflet-providers/preview/
leaflet(Dens) %>%
setView(-121,38,6) %>%
addTiles('http://korona.geog.uni-heidelberg.de/tiles/roads/x={x}&y={y}&z={z}',
attribution='Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addCircles(~longRange, ~latRange, weight = 6, radius=40,
color="blue", stroke = TRUE, fillOpacity = 0.5)
shinyApp(
ui = fluidPage(titlePanel("AgeClass Sightings in the Valley"), leafletOutput("mymap"),
sidebarLayout(sidebarPanel(helpText("Please Select a AgeClass of interest")),
selectInput("var",label = "AgeClass",
choices = as.vector(unique(MeanClusterByGeography[,10]))))),
server = function(input, output) {
points = eventReactive(input$var, {
MeanClusterByGeography=read.csv("ElkTest.csv", header=T)
AgeClass=input$var
AgeClassRow = which(MeanClusterByGeography[,10]==AgeClass)
Dens = MeanClusterByGeography[AgeClassRow,]
Dens
})
col1 = eventReactive(input$var, {
MeanClusterByGeography=read.csv("ElkTest.csv", header=T)
AgeClass=input$var
colors = string.to.color(as.vector(unique(MeanClusterByGeography[,10])))
colors[which(as.vector(unique(MeanClusterByGeography[,10]))==AgeClass)]
})
output$mymap <- renderLeaflet({
leaflet() %>%
setView(-121,38,6) %>%
addTiles('http://korona.geog.uni-heidelberg.de/tiles/roads/x={x}&y={y}&z={z}',
attribution='Imagery from <a href="http://giscience.uni-hd.de/">GIScience Research Group @ University of Heidelberg</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
addMarkers(data=points(), popup = ~paste(sep="","Lat = ",Lat,", Long = ",Lon, ", Collector = ",Collector)) #Consider making this "collected by... variable"
})
})
View(BullDens)
